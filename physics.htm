<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Physics!</title>
    <style>
        * { padding: 0; margin: 0; }
        canvas { background: #888; margin: 0 auto; display: block; }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="800" height="600"></canvas>
    <script type="text/javascript">
        var canvas = document.getElementById("myCanvas");
        var ctx = canvas.getContext("2d");
        var State = function(x, y, v) {
            this.x = x || 0;
            this.y = y || 0;
            this.v = v || 0;
            this.log = function() {
                return "x: " + this.x + ", y: " + this.y + ", v: " + this.v;
            }
        }
        var Derivative = function(dx, dy, dv) {
            this.dx = dx || 0;
            this.dy = dy || 0;
            this.dv = dv || 0;
            this.log = function() {
                return "dx: " + this.dx + ", dy: " + this.dy + ", dv: " + this.dv;
            }
        }
        var ball = {
            state: new State(100,150, 0),
            radius: 10,
            derivative: new Derivative(),
        }

        var time = 0;
        var accumulator = 0;
        var step = 1;
        var currTime = 0;
        var prevTime = 0;
        var deltaTime = 0;
        var prevState = null;
        var currState = null;
        var updateFPStime = 100;
        var sinceLastFPSUpdate = 0;

        var maxTicks = 100;
        var ticksum = 0;
        var tickList = [];
        var tickIndex = 0;
        for (i = 0; i < maxTicks; i++) {
            tickList[i] = 0;
        }        

        var fps = 0;

        function drawBall() {
            console.log(ball.state);
            ctx.beginPath();
            ctx.arc(ball.state.x, ball.state.y, ball.radius, 0, Math.PI * 2);
            ctx.fillStyle = "#1177bb";
            ctx.fill();
            ctx.closePath();
        }

        function drawFPS() {
            ctx.font = "bold 16px Arial";
            ctx.fillStyle = "#ee3388";
            ctx.fillText("FPS: " + fps, 8, 20);
            ctx.fillText("SLU: " + Math.round(sinceLastFPSUpdate), 8, 40);
        }

        function loop(timestamp) {
            console.log(timestamp);         
            if (currTime == 0) {
                currTime = timestamp;
                deltaTime = 17;
                prevTime = currTime - deltaTime;
            }
            else {
                currTime = timestamp;
                deltaTime = currTime - prevTime;
            }
            if (deltaTime > 25) {
                deltaTime = 25;
            }
            prevTime = currTime;
            sinceLastFPSUpdate += deltaTime;
            accumulator += deltaTime
            ticksum += deltaTime;
            ticksum -= tickList[tickIndex];
            tickList[tickIndex++] = deltaTime;
            if (tickIndex == maxTicks) {
                tickIndex = 0;
            }
            if (sinceLastFPSUpdate >= updateFPStime) {
                sinceLastFPSUpdate -= updateFPStime;
                fps = calcFPS();                    
            }
            if (currState === null) currState = ball.state;
            while (accumulator >= step) {
                console.log("Acc: " + accumulator);
                prevState = currState;
                currState = integrate(currState, time, step);
                time += step;
                accumulator -= step;
            }
            var alpha = accumulator / step;
            state = new State();
            state.x = currState.x * alpha + prevState.x * (1.0 - alpha);
            state.y = currState.y * alpha + prevState.y * (1.0 - alpha);
            state.v = currState.v * alpha + prevState.v * (1.0 - alpha);
            ball.state = state;
            draw();
            if (timestamp <= 200) {
                window.requestAnimationFrame(loop);
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawFPS();
            drawBall();
        }

        function calcFPS() {
            return Math.round(1000 / (ticksum / maxTicks));
        }

        function evaluate(initial, t, dt, d) {
            var state = new State();
            state.x = initial.x + d.dx * dt;
            state.y = initial.y + d.dy * dt;
            state.v = initial.v + d.dv * dt;
            console.log("State: " + state.log());
            var output = new Derivative();
            output.dx = state.v;
            output.dy = state.v;
            output.dv = acceleration(state, t+dt);
            console.log("Output: " + output.log());
            return output;
        }

        function acceleration(state, t) {
            var k = 10;
            var b = 1;
            return -k * state.x - b * state.v;
        }

        function integrate(state, t, dt) {
            a = b = c = d = new Derivative();
            a = evaluate(state, t, 0.0, new Derivative());
            b = evaluate(state, t, dt * 0.5, a);
            c = evaluate(state, t, dt * 0.5, b);
            d = evaluate(state, t, dt, c);
            dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx);
            dydt = 1.0 / 6.0 * (a.dy + 2.0 * (b.dy + c.dy) + d.dy);
            dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);
            
            newState = new State();
            newState.x = state.x + dxdt * dt;
            newState.y = state.y + dydt * dt;
            newState.v = state.v + dvdt * dt;
            console.log("newState: " + newState.log());
            return newState;
        }

        window.requestAnimationFrame(loop);
    </script>
</body>
</html>